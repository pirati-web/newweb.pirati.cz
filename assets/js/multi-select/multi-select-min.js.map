{"version":3,"file":"multi-select-min.js","sources":["../src/dom-component.js","../src/defaults.js","../src/multi-select.js"],"sourcesContent":["const d = document;\r\n\r\nexport default class DomComponent {\r\n    constructor(element, options = {}, defaults = {}) {\r\n        this.options = Object.assign({}, defaults, options);\r\n\r\n        this._events = [];\r\n\r\n        this.dom = {        \r\n            el: this._setElement(element)\r\n        };\r\n        console.log('Returned element ('+element+'):'+this.dom.el.id);\r\n\r\n    }\r\n\r\n    /**\r\n     * Add/remove the toggling className\r\n     * @param {Boolean|undefined} show\r\n     * @return DomComponent\r\n     */\r\n    toggle(show = undefined) {\r\n        let classList = this.dom.el.classList;\r\n        let id = this.dom.el.id;\r\n        //console.log('toggle id:'+id+' show:'+show);\r\n        if (show !== undefined) {\r\n            classList[show ? 'remove' : 'add']('si-off');\r\n            return this;\r\n        }\r\n        classList.toggle('si-off');\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Bind a (delegated) event\r\n     * @param {String} event\r\n     * @param {Function} fn\r\n     * @param {HTMLElement|Document} el\r\n     * @return DomComponent\r\n     */\r\n    on(event, fn, el = null) {\r\n\r\n        console.log('Registered event :'+event+' for '+this.dom.el.id);\r\n\r\n        (el || this.dom.el).addEventListener(event, fn = fn.bind(this), true);\r\n\r\n        this._events.push({\r\n            name: event,\r\n            fn: fn,\r\n            el: el\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the main wrapping element\r\n     * @return {Element}\r\n     */\r\n    getElement() {\r\n        return this.dom.el;\r\n    }\r\n\r\n    /**\r\n     * Unbind all events and nullify references\r\n     * @return void\r\n     */\r\n    remove() {\r\n        this._events = this._events.filter(event => {\r\n            return (event.el || this.dom.el).removeEventListener(event.name, event.fn, true);\r\n        });\r\n        this.dom.el.parentNode.removeChild(this.dom.el);\r\n        this.dom = this.options = null;\r\n    }\r\n\r\n    /**\r\n     * Query the element in the DOM if its a string\r\n     * @param {Element|String} el\r\n     * @return {Element|null}\r\n     * @protected\r\n     */\r\n    _setElement(el) {\r\n        //console.log('Send element:'+el);\r\n        if (!el && !el.nodeType && typeof el !== 'string') {\r\n            throw new Error('Wrong element type provided!');\r\n        }\r\n        //return el;\r\n        //var ell=d.querySelector(el);\r\n        if (el.nodeType) return el;\r\n        //console.log('parent:'+this.options.parent);\r\n        //console.log('d:'+d);\r\n        //return(d.querySelector(el));\r\n        return (this.options.parent || d).querySelector(el);\r\n    }\r\n\r\n    /**\r\n     * Communicate changes\r\n     * @param {String} name\r\n     * @param {Object|null} detail\r\n     * @protected\r\n     */\r\n    _trigger(name, detail = null) {\r\n        let event;\r\n        console.log('_trigger:'+name+','+detail);\r\n        if (typeof CustomEvent === 'function') {\r\n            event = new CustomEvent(name, {\r\n                detail: detail,\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n        } else {\r\n            event =  d.createEvent('CustomEvent');\r\n            event.initCustomEvent(name, true, true, detail);\r\n        }\r\n\r\n        this.dom.el.dispatchEvent(event);\r\n    }\r\n}\r\n","export default {\r\n    items: [],\r\n    display: 'value',\r\n    current: null,\r\n    parent: null,\r\n    maxHeight: 0,\r\n    sort: true,\r\n    order: 'desc',\r\n    placeholder: 'Select items',\r\n    more: '(+{X} more)'\r\n};\r\n","import DomHelper from './dom-component.js';\r\nimport defaults from './defaults.js';\r\n\r\nconst d = document;\r\n\r\nexport default class MultiSelect extends DomHelper {\r\n    constructor(element, options = {}) {\r\n        super(element, options, defaults);\r\n\r\n        if (this.options.sort) {\r\n            this.options.items = this._sortItems(options.items);\r\n        }\r\n\r\n        this.options.items = options.items && options.items.length\r\n            ? this._convertItems(options.items)\r\n            : [];\r\n\r\n        if (options.current && options.current.length) {\r\n            options.current = this._convertItems(options.current);\r\n            this._setSelected(options.current);\r\n        }\r\n\r\n        this._renderInit();\r\n\r\n        this._setResultMessage();\r\n\r\n        this._bindEvents();\r\n    }\r\n\r\n    /**\r\n     * Bind the delegated dom events\r\n     * @private\r\n     */\r\n    _bindEvents() {\r\n        this.on('keyup', e => {\r\n            if (e.key === 'Escape' || e.keyCode === 27) this.toggle(false);\r\n        }, d);\r\n\r\n        this.on('click', e => {\r\n            //console.log('click event');\r\n            if (e.target.classList.contains('si-select-all')) {\r\n                //console.log('click select-all');\r\n                this.setAll();\r\n                return false;\r\n            } \r\n            if (e.target.classList.contains('si-select-none')) {\r\n                //console.log('click select-none');\r\n                this.setNone();\r\n                return false;\r\n            } \r\n            if (e.target.classList.contains('si-item')) {\r\n              console.log('Eventstart before filter:'+e.target.id);\r\n              if (this.dom.el.contains(e.target)) {\r\n                console.log('Eventstart:'+e.target.id);\r\n                return this._setCurrent(e)._setResultMessage();\r\n                }\r\n              }\r\n            if (!this.dom.el.contains(e.target)) return this.toggle(false);\r\n            this.toggle();\r\n        }, this.dom.el);\r\n\r\n        this.on('click', e => {\r\n            if (!this.dom.el.contains(e.target)) return this.toggle(false);\r\n        }, d);\r\n\r\n    }\r\n\r\n    /**\r\n     * Get all items in the list\r\n     * @return {Object[]}\r\n     * @public\r\n     */\r\n    getItems() {\r\n        return Array.from(this.options.items.values());\r\n    }\r\n\r\n    /**\r\n     * Return the current field value object\r\n     * @param {string} key Only return a specific value from each current item\r\n     * @return {[]|null}\r\n     * @public\r\n     */\r\n    getCurrent(key = '') {\r\n        //console.log('getCurrent: '+this.dom.el.id);\r\n        let items = this.getItems().filter(i => i.selected);\r\n        return !key ? items : items.map(i => i[key]);\r\n    }\r\n\r\n    /**\r\n     * @todo do better: setCurrent, _setCurrent & _setSelected ...\r\n     * @param {*|!object} currents\r\n     * @public\r\n     */\r\n    setCurrent(currents) {\r\n        console.log('setCurrent:'+currents);\r\n        let items = this.options.items,\r\n            display = this.options.display;\r\n\r\n        currents = Array.isArray(currents) ? currents : [currents];\r\n        currents = this._convertItems(currents);\r\n\r\n        currents.forEach(current => {\r\n            items.forEach((item, key) => {\r\n                if (item[display] === current[display]) {\r\n                    this.dom.el.querySelector(`.si-item[data-key=\"${key}\"]`).classList.add('si-selected');\r\n                    item.selected = true;\r\n                }\r\n            });\r\n        });\r\n\r\n        this._setResultMessage();\r\n    }\r\n\r\n    /**\r\n     * Set all items to on\r\n     * @public\r\n     */\r\n    setAll() {\r\n        this.options.items.forEach((item, key) => {\r\n            this.dom.el.querySelector(`.si-item[data-key=\"${key}\"]`).classList.add('si-selected');\r\n            item.selected = true;\r\n        });\r\n\r\n        this._setResultMessage();\r\n    }\r\n\r\n    /**\r\n     * Set all items to off\r\n     * @public\r\n     */\r\n    setNone() {\r\n        this.options.items.forEach((item, key) => {\r\n            this.dom.el.querySelector(`.si-item[data-key=\"${key}\"]`).classList.remove('si-selected');\r\n            item.selected = false;\r\n        });\r\n\r\n        this._setResultMessage();\r\n    }\r\n\r\n\r\n    /**\r\n     * Find an item in the list\r\n     * @param {HTMLElement|String|Number} item\r\n     * @return {{}}\r\n     * @public\r\n     */\r\n    findItem(item) {\r\n        let display = this.options.display;\r\n        item = item.nodeName ? item.dataset.value : item;\r\n        return this.options.items.find(i => i[display] === item);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Event} e\r\n     * @param {boolean} trigger\r\n     * @private\r\n     */\r\n    _setCurrent(e, trigger = true) {\r\n        console.log('_setCurrent:'+e.target.id+', trigger:'+trigger);\r\n\r\n        let el = e.target,\r\n            key = parseInt(el.dataset.key, 10),\r\n            item = this.options.items.get(key);\r\n\r\n        item.selected = el.classList.toggle('si-selected');\r\n        this.options.items.set(key, item);\r\n        if (trigger) this._trigger('change', item);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Loop over the passed array to set selected items\r\n     * @param {array} currents\r\n     * @private\r\n     */\r\n    _setSelected(currents) {\r\n        console.log('_setSelected:'+currents);\r\n        let items = this.options.items,\r\n            display = this.options.display;\r\n\r\n        currents.forEach(current => {\r\n            items.forEach(item => {\r\n                if (item[display] === current[display]) {\r\n                    item.selected = true;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Display selection result message\r\n     * @private\r\n     */\r\n    _setResultMessage() {\r\n        console.log('_setResultMessage:'+this.dom.el.id);\r\n        let selection = this.getCurrent(),\r\n            display = this.options.display,\r\n            count = selection.length,\r\n            result = '';\r\n\r\n        switch (count) {\r\n            case 1:\r\n                result = selection[0][display];\r\n                break;\r\n            case 0:\r\n                result = this.options.placeholder;\r\n                break;\r\n            default:\r\n                result = /({X})/.test(this.options.more)\r\n                    ? `${selection[0][display]} ${this.options.more.replace('{X}', count - 1)}`\r\n                    : this.options.more;\r\n        }\r\n\r\n        this.dom.result.classList[count ? 'add' : 'remove']('si-selection');\r\n        this.dom.result.innerHTML = result;\r\n    }\r\n\r\n    /**\r\n     * Make an array of object if needed\r\n     * @todo better 'selected' checking: what if `current` is array of objects\r\n     * @param {Array} items\r\n     * @return {Map<Object>}\r\n     * @private\r\n     */\r\n    _convertItems(items = []) {\r\n        let display = this.options.display,\r\n            map = new Map(),\r\n            key = 0;\r\n\r\n        items.forEach(item => {\r\n            if (typeof item !== 'object') item = {[display]: item};\r\n            map.set(key++, item);\r\n        });\r\n\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Create the HTML upon instantiation\r\n     * @return {Node}\r\n     * @private\r\n     */\r\n    _renderInit() {\r\n        let frag = d.createDocumentFragment();\r\n\r\n        this.dom.el.classList.add('si-off', 'si-wrap');\r\n        this.dom.result = frag.appendChild(this._renderResultDiv());\r\n\r\n        frag.appendChild(this._renderList());\r\n        return this.dom.el.appendChild(frag);\r\n    }\r\n\r\n    /**\r\n     * Create the selection result element\r\n     * @return {HTMLElement}\r\n     * @private\r\n     */\r\n    _renderResultDiv() {\r\n        let el = d.createElement('div');\r\n        el.className = 'si-result';\r\n        return el;\r\n    }\r\n\r\n\r\n    /**\r\n     * Create the list element\r\n     * @return {HTMLElement}\r\n     * @private\r\n     */\r\n    _renderList() {\r\n        let wrap = d.createElement('div'),\r\n            el = d.createElement('ul'),\r\n            maxHeight = this.options.maxHeight;\r\n\r\n        wrap.className = 'si-list';\r\n\r\n        if (maxHeight) wrap.style.maxHeight = maxHeight + 'px';\r\n\r\n        el.innerHTML = this._renderListItems();\r\n        \r\n        let el2 = d.createElement('div');\r\n        el2.className = 'si-filter';\r\n        el2.innerHTML = '<div><span>'+this.options.placeholder+'</span><div style=\"float:right;\"><a class=\"si-select-all\">&#x2713; Vše</a>&nbsp;<a class=\"si-select-none\">&#x2717 Nic</a></div></div>';\r\n        wrap.appendChild(el2);\r\n\r\n        wrap.appendChild(el);\r\n\r\n        return wrap;\r\n    }\r\n\r\n    /**\r\n     * Create the list items\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    _renderListItems() {\r\n        let items = this.options.items,\r\n            display = this.options.display,\r\n            list = '',\r\n            selected;\r\n\r\n        items.forEach((item, key) => {\r\n            selected = item.selected ? ' si-selected' : '';\r\n            list += `<li id=\"`+this.dom.el.id+`_${key}\" class=\"si-item${selected}\" data-key=\"${key}\">${item[display]}</li>`;\r\n        });\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Rearrange the list\r\n     * @private\r\n     */\r\n    _sortItems() {\r\n        let order = this.options.order === 'desc' ? 1 : -1,\r\n            display = this.options.display;\r\n        this.options.items.sort((a, b) => {\r\n            if (a[display] < b[display]) return -order;\r\n            if (a[display] > b[display]) return order;\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n"],"names":["d","document","DomComponent","[object Object]","element","options","defaults","this","Object","assign","_events","dom","el","_setElement","console","log","id","show","classList","undefined","toggle","event","fn","addEventListener","bind","push","name","filter","removeEventListener","parentNode","removeChild","nodeType","Error","parent","querySelector","detail","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","dispatchEvent","items","display","current","maxHeight","sort","order","placeholder","more","DomHelper","super","_sortItems","length","_convertItems","_setSelected","_renderInit","_setResultMessage","_bindEvents","on","e","key","keyCode","target","contains","setAll","setNone","_setCurrent","Array","from","values","getItems","i","selected","map","currents","isArray","forEach","item","add","remove","nodeName","dataset","value","find","trigger","parseInt","get","set","_trigger","selection","getCurrent","count","result","test","replace","innerHTML","Map","frag","createDocumentFragment","appendChild","_renderResultDiv","_renderList","createElement","className","wrap","style","_renderListItems","el2","list","a","b"],"mappings":"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"}